# Sagemath 9.2 AMM

from Crypto.Util.number import bytes_to_long, long_to_bytes

L=128
p=127846753573603084140032502367311687577517286192893830888210505400863747960458410091624928485398237221748639465569360357083610343901195273740653100259873512668015324620239720302434418836556626441491996755736644886234427063508445212117628827393696641594389475794455769831224080974098671804484986257952189021223
q=145855456487495382044171198958191111759614682359121667762539436558951453420409098978730659224765186993202647878416602503196995715156477020462357271957894750950465766809623184979464111968346235929375202282811814079958258215558862385475337911665725569669510022344713444067774094112542265293776098223712339100693
r=165967627827619421909025667485886197280531070386062799707570138462960892786375448755168117226002965841166040777799690060003514218907279202146293715568618421507166624010447447835500614000601643150187327886055136468260391127675012777934049855029499330117864969171026445847229725440665179150874362143944727374907
n=p*q*r
c = 2832775557487418816663494645849097066925967799754895979829784499040437385450603537732862576495758207240632734290947928291961063611897822688909447511260639429367768479378599532712621774918733304857247099714044615691877995534173849302353620399896455615474093581673774297730056975663792651743809514320379189748228186812362112753688073161375690508818356712739795492736743994105438575736577194329751372142329306630950863097761601196849158280502041616545429586870751042908365507050717385205371671658706357669408813112610215766159761927196639404951251535622349916877296956767883165696947955379829079278948514755758174884809479690995427980775293393456403529481055942899970158049070109142310832516606657100119207595631431023336544432679282722485978175459551109374822024850128128796213791820270973849303929674648894135672365776376696816104314090776423931007123128977218361110636927878232444348690591774581974226318856099862175526133892
pf = [2, 7, 757, 1709, 85015583, 339028665499, 149105250954771885483776047, 1642463892686572578602085475101104723805585678675707586553009837707279291648160744722745420570786735582631019452016654157586623543454908938807521637550223579103317696104438456966780396624343550451096013730928292041667133825444056448136643704677066463120079]
qf = [2,2, 3,3 , 66553 , 81768440203, 84405986771, 38037107558208320033]
rf = [2 , 5156273 , 10012111 , 11607389 , 68872137169799749, 9691125310820433463]
ep = 757
eq = 66553
er = 5156273
e = ep*eq*er

c=c*inverse_mod(power_mod(2^1024,e,n),n)%n
c=c%(p*q)

start_time = time.time()
print("Start time: 0.0")
# find all roots for pow(x, e, p)=1 and pow(x, e, q)=1
cp = c % p
cq = c % q
# cr = c % r
# r_proot = q_proot
p_proot = findAllPRoot(p, ep)
print("P roots found: %s" % str(time.time()-start_time))
q_proot = findAllPRoot(q, eq)
print("Q roots found: %s" % str(time.time()-start_time))
# r_proot = findAllPRoot(r, er)
# print("R roots found: %s" % str(time.time()-start_time))

cp = power_mod(cp, inverse_mod(eq*er, p-1), p)
cq = power_mod(cq, inverse_mod(ep*er, q-1), q)


# find all roots for pow(x, e, p)=cp and pow(x, e, q)=cq
mp = AMM(cp, ep, p)
print("mp found: %s" % str(time.time()-start_time))
mq = AMM(cq, eq, q)
print("mq found: %s" % str(time.time()-start_time))
# mr = AMM(cr, er, r)
# print("mq found: %s" % str(time.time()-start_time))

mps = findAllSolutions(mp, p_proot, cp, p, ep)
print("mps found: %s" % str(time.time()-start_time))
mqs = findAllSolutions(mq, q_proot, cq, q, eq)
print("mqs found: %s" % str(time.time()-start_time))
# mrs = findAllSolutions(mr, r_proot, cr, r, er)
# print("mrs found: %s" % str(time.time()-start_time))

# check 4919*4919 possibles for answer
for mpp in mps:
    for mqq in mqs:
#         for mrr in mrs:
#             solution = CRT_list([int(mpp), int(mqq), int(mrr)], [p, q, r])
            solution = CRT_list([int(mpp), int(mqq)], [p, q])
            if b'SUSCTF' in long_to_bytes(solution):
                print(long_to_bytes(solution))
                print("solution found: %s" % str(time.time()-start_time))